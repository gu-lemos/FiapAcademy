@using FiapAcademyAdmin.Application.Interfaces
@using FiapAcademyAdmin.Application.Interfaces.Services
@using FiapAcademyAdmin.Web.Services

@inject INotificationService NotificationService

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    @foreach (var notification in notifications)
    {
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header @GetHeaderClass(notification.Type)">
                <i class="@notification.Icon me-2"></i>
                <strong class="me-auto">@notification.Title</strong>
            </div>
            <div class="toast-body">
                @notification.Message
            </div>
        </div>
    }
</div>

@code {
    private List<NotificationItem> notifications = new();
    private int nextId = 1;

    protected override void OnInitialized()
    {
        if (NotificationService is NotificationService notificationService)
        {
            notificationService.OnShowToast += ShowToast;
        }
    }

    private void ShowToast(string message, string type, string icon)
    {
        var notification = new NotificationItem
        {
            Id = nextId++,
            Message = message,
            Type = type,
            Icon = icon,
            Title = GetTitleByType(type)
        };

        notifications.Add(notification);
        StateHasChanged();

        _ = Task.Delay(5000).ContinueWith(_ =>
        {
            InvokeAsync(() =>
            {
                RemoveNotification(notification.Id);
                StateHasChanged();
            });
        });
    }

    private void RemoveNotification(int id)
    {
        notifications.RemoveAll(n => n.Id == id);
    }

    private string GetTitleByType(string type)
    {
        return type switch
        {
            "success" => "Sucesso",
            "error" => "Erro",
            "warning" => "Aviso",
            "info" => "Informação",
            _ => "Notificação"
        };
    }

    private string GetHeaderClass(string type)
    {
        return type switch
        {
            "success" => "bg-success text-white",
            "error" => "bg-danger text-white",
            "warning" => "bg-warning text-dark",
            "info" => "bg-info text-white",
            _ => ""
        };
    }

    public class NotificationItem
    {
        public int Id { get; set; }
        public string Message { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
    }
} 