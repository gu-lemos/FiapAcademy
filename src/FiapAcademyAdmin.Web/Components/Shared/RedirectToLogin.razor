@using FiapAcademyAdmin.Application.Interfaces.Services
@using FiapAcademyAdmin.Web.Services

@inject IAuthStateService AuthStateService
@inject NavigationManager NavigationManager

@implements IDisposable

@if (!AuthStateService.IsAuthenticated)
{
    <div class="redirect-container">
        <div class="redirect-card">
            <div class="redirect-icon">
                <i class="fas fa-lock"></i>
            </div>
            <h2>Acesso Restrito</h2>
            <p>Você precisa estar logado para acessar esta página.</p>
            <div class="redirect-actions">
                <button class="btn btn-primary" @onclick="GoToLogin">
                    <i class="fas fa-sign-in-alt me-2"></i>
                    Ir para Login
                </button>
                <button class="btn btn-secondary" @onclick="GoToHome">
                    <i class="fas fa-home me-2"></i>
                    Voltar ao Início
                </button>
            </div>
        </div>
    </div>
}
else
{
    @ChildContent
}

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    protected override void OnInitialized()
    {
        AuthStateService.AuthenticationStateChanged += OnAuthStateChanged;
    }

    private void OnAuthStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }

    private void GoToHome()
    {
        NavigationManager.NavigateTo("/");
    }

    public void Dispose()
    {
        AuthStateService.AuthenticationStateChanged -= OnAuthStateChanged;
    }
} 