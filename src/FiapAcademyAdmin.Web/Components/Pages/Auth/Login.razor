@page "/login"
@layout BlankLayout

@using FiapAcademyAdmin.Application.DTOs.Command.Auth
@using FiapAcademyAdmin.Web.Components.Layout
@using FiapAcademyAdmin.Web.Services
@using FiapAcademyAdmin.Application.Interfaces.Services

@inject IAuthStateService AuthStateService
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService

<PageTitle>Login - FiapAcademyAdmin</PageTitle>

@if (AuthStateService.IsAuthenticated)
{
    <div class="d-flex justify-content-center align-items-center vh-100 bg-light">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
            <p class="mt-3">Redirecionando para home...</p>
        </div>
    </div>
}
else
{
    <div class="container d-flex justify-content-center align-items-center vh-100 login-gradient-bg">
        <div class="card auth-card shadow p-4">
            <h2 class="auth-title text-center">Login</h2>
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
                @if (validationErrors.Any())
                {
                    <div class="alert alert-danger auth-alert">
                        <ul class="mb-0">
                            @foreach (var error in validationErrors)
                            {
                                <li>@error</li>
                            }
                        </ul>
                    </div>
                }
                <div class="mb-3">
                    <label for="email" class="form-label auth-label">Email</label>
                    <InputText id="email" class="form-control auth-input" @bind-Value="loginModel.Email" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label auth-label">Senha</label>
                    <InputText type="password" id="password" class="form-control auth-input" @bind-Value="loginModel.Senha" />
                </div>
                <button type="submit" class="btn auth-btn w-100" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Entrando...</span>
                    }
                    else
                    {
                        <span>Entrar</span>
                    }
                </button>
            </EditForm>
            <div class="mt-3 text-center">
                <small class="text-muted">
                    Não tem conta? <a href="/register" class="auth-link">Registre-se</a>
                </small>
            </div>
        </div>
    </div>
}

@code {
    private LoginCommandDTO loginModel = new();
    private bool isLoading = false;
    private string errorMessage = string.Empty;
    private List<string> validationErrors = new();

    protected override void OnInitialized()
    {
        if (AuthStateService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(loginModel.Email))
            validationErrors.Add("O email é obrigatório.");
        else if (!System.Text.RegularExpressions.Regex.IsMatch(loginModel.Email, @"^[^@]+@[^@]+\.[^@]+$"))
            validationErrors.Add("Email inválido.");

        if (string.IsNullOrWhiteSpace(loginModel.Senha))
            validationErrors.Add("A senha é obrigatória.");
   
        if (validationErrors.Any())
        {
            StateHasChanged();
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            var success = await AuthStateService.LoginAsync(loginModel.Email, loginModel.Senha);
            
            if (success)
            {
                NotificationService.ShowToast($"Login realizado sucesso!", "success", "fas fa-check-circle");
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                errorMessage = "Email ou senha inválidos. Verifique suas credenciais.";
                NotificationService.ShowToast($"{errorMessage}", "error", "fas fa-exclamation-circle");
            }
        }
        catch (Exception ex)
        {
            NotificationService.ShowToast($"{ex.Message}", "error", "fas fa-exclamation-circle");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
} 