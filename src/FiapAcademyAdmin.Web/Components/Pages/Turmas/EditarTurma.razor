@page "/turmas/editar/{Id:int}"

@using FiapAcademyAdmin.Application.DTOs.Command.Turma
@using FiapAcademyAdmin.Application.DTOs.Query.Turma
@using FiapAcademyAdmin.Application.DTOs.Query.Aluno
@using FiapAcademyAdmin.Application.Handlers.Commands.Turma.Update
@using FiapAcademyAdmin.Application.Handlers.Queries.Turma.GetById
@using FiapAcademyAdmin.Application.Handlers.Queries.Turma.GetAlunosDisponiveis
@using FiapAcademyAdmin.Application.Interfaces.Services
@using FiapAcademyAdmin.Web.Components.Shared
@using MediatR

@inject IMediator Mediator
@inject INotificationService NotificationService
@inject NavigationManager Navigation

<PageTitle>Editar Turma - FiapAcademyAdmin</PageTitle>

<RedirectToLogin>
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <div class="card">
                    <div class="card-header">
                        <h3 class="mb-0">
                            <i class="fas fa-edit me-2"></i>
                            Editar Turma
                        </h3>
                    </div>
                    <div class="card-body">
                        @if (isLoading)
                        {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Carregando...</span>
                                </div>
                                <p class="mt-2">Carregando...</p>
                            </div>
                        }
                        else
                        {
                            <EditForm Model="@turma" OnValidSubmit="ConfirmarSalvar" FormName="EditarTurma">
                                @if (validationErrors.Any())
                                {
                                    <div class="alert alert-danger">
                                        <ul class="mb-0">
                                            @foreach (var error in validationErrors)
                                            {
                                                <li>@error</li>
                                            }
                                        </ul>
                                    </div>
                                }
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="mb-3">
                                            <label for="nome" class="form-label">Nome da Turma</label>
                                            <InputText id="nome" class="form-control" @bind-Value="turma.Nome" />
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="mb-3">
                                            <label for="descricao" class="form-label">Descrição</label>
                                            <InputTextArea id="descricao" class="form-control" @bind-Value="turma.Descricao" rows="4" />
                                            <small class="form-text text-muted">Descreva o objetivo e conteúdo da turma</small>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="mb-3">
                                            <label class="form-label">Alunos da Turma</label>
                                            @if (turmaAtual != null && turmaAtual.Alunos.Any())
                                            {
                                                <div class="alert alert-info">
                                                    <i class="fas fa-info-circle me-2"></i>
                                                    <strong>Alunos atuais:</strong>
                                                    <ul class="mb-0 mt-2">
                                                        @foreach (var aluno in turmaAtual.Alunos.OrderBy(a => a.Nome))
                                                        {
                                                            <li>@aluno.Nome - @aluno.Email</li>
                                                        }
                                                    </ul>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="mb-3">
                                            <label class="form-label">Alunos Disponíveis</label>
                                            @if (alunosDisponiveis != null && alunosDisponiveis.Any())
                                            {
                                                <div class="border rounded p-3" style="max-height: 300px; overflow-y: auto;">
                                                    @foreach (var aluno in alunosDisponiveis.OrderBy(a => a.Nome))
                                                    {
                                                        <div class="form-check">
                                                            <input class="form-check-input" type="checkbox" 
                                                                   id="aluno_@aluno.Id" 
                                                                   value="@aluno.Id" 
                                                                   @onchange="@((e) => ToggleAluno(aluno.Id, e.Value))"
                                                                   checked="@turma.AlunoIds.Contains(aluno.Id)" />
                                                            <label class="form-check-label" for="aluno_@aluno.Id">
                                                                <strong>@aluno.Nome</strong> - @aluno.Email
                                                            </label>
                                                        </div>
                                                    }
                                                </div>
                                                <small class="form-text text-muted">Selecione os alunos que farão parte desta turma</small>
                                            }
                                            else
                                            {
                                                <div class="alert alert-info">
                                                    <i class="fas fa-info-circle me-2"></i>
                                                    Não há alunos disponíveis para associar à turma.
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>

                                <div class="d-flex justify-content-between">
                                    <a href="/turmas" class="btn btn-secondary">
                                        <i class="fas fa-arrow-left me-2"></i>
                                        Voltar
                                    </a>
                                    <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            <span>Salvando...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-save me-2"></i>
                                            <span>Salvar</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <ConfirmDialog 
        IsVisible="showConfirmDialog"
        Title="Confirmar Edição"
        Message="Tem certeza que deseja editar a turma?"
        ConfirmText="Salvar"
        LoadingText="Salvando..."
        IsLoading="isSaving"
        OnConfirm="SalvarTurma"
        OnCancel="CancelarSalvar" />
</RedirectToLogin>

@code {
    [Parameter] public int Id { get; set; }

    private UpdateTurmaCommandDTO turma = new();
    private TurmaQueryDTO? turmaAtual;
    private bool isLoading = false;
    private bool isSaving = false;
    private bool showConfirmDialog = false;
    private List<AlunoQueryDTO>? alunosDisponiveis;
    private List<string> validationErrors = new();

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(CarregarTurma(), CarregarAlunosDisponiveis());
    }

    private async Task CarregarAlunosDisponiveis()
    {
        var query = new GetAlunosDisponiveisQuery { TurmaId = Id };
        var result = await Mediator.Send(query);
        
        if (result.IsSuccess)
        {
            alunosDisponiveis = result.Data;
        }
    }

    private async Task CarregarTurma()
    {
        isLoading = true;

        var query = new GetTurmaByIdQuery { Id = Id };
        var result = await Mediator.Send(query);

        if (result.IsSuccess && result.Data != null)
        {
            turmaAtual = result.Data;
            turma = new UpdateTurmaCommandDTO
            {
                Id = turmaAtual.Id,
                Nome = turmaAtual.Nome,
                Descricao = turmaAtual.Descricao,
                AlunoIds = turmaAtual.Alunos.Select(a => a.Id).ToList()
            };
        }
        else
        {
            NotificationService.ShowToast($"Erro ao carregar dados da turma", "error", "fas fa-exclamation-circle");
        }

        isLoading = false;
    }

    private void ToggleAluno(int alunoId, object? isChecked)
    {
        if (isChecked is bool checkedValue)
        {
            if (checkedValue)
            {
                if (!turma.AlunoIds.Contains(alunoId))
                {
                    turma.AlunoIds.Add(alunoId);
                }
            }
            else
            {
                turma.AlunoIds.Remove(alunoId);
            }
        }
    }

    private void ConfirmarSalvar()
    {
        showConfirmDialog = true;
    }

    private void CancelarSalvar()
    {
        showConfirmDialog = false;
    }

    private async Task SalvarTurma()
    {
        validationErrors.Clear();

        if (string.IsNullOrWhiteSpace(turma.Nome))
            validationErrors.Add("Nome é obrigatório.");
        else if (turma.Nome.Length < 3)
            validationErrors.Add("Nome deve ter no mínimo 3 caracteres.");
        else if (turma.Nome.Length > 100)
            validationErrors.Add("Nome deve ter no máximo 100 caracteres.");

        if (string.IsNullOrWhiteSpace(turma.Descricao))
            validationErrors.Add("Descrição é obrigatória.");
        else if (turma.Descricao.Length < 10)
            validationErrors.Add("Descrição deve ter no mínimo 10 caracteres.");
        else if (turma.Descricao.Length > 500)
            validationErrors.Add("Descrição deve ter no máximo 500 caracteres.");

        if (validationErrors.Any())
        {
            isSaving = false;
            StateHasChanged();
            return;
        }

        isSaving = true;

        var command = new UpdateTurmaCommand { Turma = turma };
        var result = await Mediator.Send(command);

        if (result.IsSuccess)
        {
            NotificationService.ShowToast($"Turma {turma.Nome} atualizada com sucesso!", "success", "fas fa-check-circle");
            Navigation.NavigateTo("/turmas");
        }
        else
        {
            NotificationService.ShowToast($"Erro ao atualizar turma {turma.Nome}: {result.Message}", "error", "fas fa-exclamation-circle");
        }

        showConfirmDialog = false;
        isSaving = false;
    }
} 